<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <title>Rắn săn mồi - Mobile</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            touch-action: manipulation;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f5f5f7;
            display: flex;
            flex-direction: column;
            align-items: center;
            height: 100vh;
            overflow: hidden;
            color: #1d1d1f;
        }
        
        header {
            padding: 15px 0;
            text-align: center;
            width: 100%;
        }
        
        h1 {
            font-size: 22px;
            margin-bottom: 5px;
            color: #0066cc;
        }
        
        #game-container {
            position: relative;
            width: 100%;
            max-width: 400px;
            margin: 0 auto;
        }
        
        #game-board {
            width: 100%;
            background-color: #fff;
            border: 2px solid #ddd;
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            display: block;
        }
        
        #stats-bar {
            display: flex;
            justify-content: space-between;
            width: 100%;
            max-width: 400px;
            padding: 10px 0;
            font-size: 16px;
            font-weight: 600;
        }
        
        #controls {
            display: grid;
            grid-template-areas:
                ". up ."
                "left . right"
                ". down .";
            gap: 10px;
            margin-top: 20px;
            width: 200px;
            height: 200px;
        }
        
        .control-btn {
            background-color: #007aff;
            color: white;
            border: none;
            border-radius: 50%;
            width: 60px;
            height: 60px;
            font-size: 24px;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            user-select: none;
            -webkit-tap-highlight-color: transparent;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }
        
        .control-btn:active {
            background-color: #0062cc;
            transform: scale(0.95);
        }
        
        #up-btn { grid-area: up; }
        #left-btn { grid-area: left; }
        #right-btn { grid-area: right; }
        #down-btn { grid-area: down; }
        
        #game-over {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: rgba(255, 59, 48, 0.9);
            color: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            display: none;
            width: 80%;
            max-width: 300px;
        }
        
        #restart-btn {
            margin-top: 15px;
            padding: 10px 20px;
            background-color: #fff;
            color: #ff3b30;
            border: none;
            border-radius: 20px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
        }
        
        #timer {
            font-size: 16px;
            font-weight: 600;
            color: #ff3b30;
            margin-top: 5px;
        }
        
        @media (max-height: 700px) {
            #controls {
                width: 160px;
                height: 160px;
            }
            .control-btn {
                width: 50px;
                height: 50px;
                font-size: 20px;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>RẮN SĂN MỒI</h1>
        <div id="timer">Thời gian: 03:00</div>
    </header>
    
    <div id="stats-bar">
        <div id="score-display">Điểm: 0</div>
        <div id="food-count">Mồi: 0</div>
        <div id="record-score">Kỷ lục: 0</div>
    </div>
    
    <div id="game-container">
        <canvas id="game-board"></canvas>
        
        <div id="game-over">
            <h2>GAME OVER!</h2>
            <p id="final-score">Điểm: 0 | Mồi: 0</p>
            <p id="record-display">Kỷ lục: 0 điểm</p>
            <button id="restart-btn">Chơi lại</button>
        </div>
    </div>
    
    <div id="controls">
        <button class="control-btn" id="up-btn">↑</button>
        <button class="control-btn" id="left-btn">←</button>
        <button class="control-btn" id="right-btn">→</button>
        <button class="control-btn" id="down-btn">↓</button>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Thiết lập canvas
            const canvas = document.getElementById('game-board');
            const ctx = canvas.getContext('2d');
            
            // Điều chỉnh kích thước canvas cho mobile
            function resizeCanvas() {
                const size = Math.min(window.innerWidth - 40, 400);
                canvas.width = size;
                canvas.height = size;
            }
            resizeCanvas();
            window.addEventListener('resize', resizeCanvas);
            
            // Các biến game
            const gridSize = 20;
            let tileCount = Math.floor(canvas.width / gridSize);
            let score = 0;
            let foodEaten = 0;
            let recordScore = localStorage.getItem('snakeRecordScore') || 0;
            let recordFood = localStorage.getItem('snakeRecordFood') || 0;
            
            // Rắn
            let snake = [{x: Math.floor(tileCount/2), y: Math.floor(tileCount/2)}];
            let velocityX = 0;
            let velocityY = 0;
            let lastMoveTime = 0;
            let moveDelay = 150; // Thời gian delay giữa các lần di chuyển (ms)
            
            // Thức ăn
            let foodX, foodY;
            let foodVelocityX = 0;
            let foodVelocityY = 0;
            
            // Game state
            let gameOver = false;
            let gameStartTime = 0;
            let gameDuration = 3 * 60 * 1000; // 3 phút
            let gameLoop;
            let foodMoveLoop;
            let timerLoop;
            
            // Các phần tử UI
            const scoreDisplay = document.getElementById('score-display');
            const foodCountDisplay = document.getElementById('food-count');
            const recordScoreDisplay = document.getElementById('record-score');
            const gameOverDisplay = document.getElementById('game-over');
            const finalScoreDisplay = document.getElementById('final-score');
            const recordDisplay = document.getElementById('record-display');
            const restartBtn = document.getElementById('restart-btn');
            const timerDisplay = document.getElementById('timer');
            
            // Nút điều khiển
            const upBtn = document.getElementById('up-btn');
            const leftBtn = document.getElementById('left-btn');
            const rightBtn = document.getElementById('right-btn');
            const downBtn = document.getElementById('down-btn');
            
            // Khởi tạo game
            initGame();
            
            function initGame() {
                // Reset game state
                snake = [{x: Math.floor(tileCount/2), y: Math.floor(tileCount/2)}];
                velocityX = 0;
                velocityY = 0;
                score = 0;
                foodEaten = 0;
                gameOver = false;
                gameStartTime = Date.now();
                
                // Update UI
                scoreDisplay.textContent = `Điểm: ${score}`;
                foodCountDisplay.textContent = `Mồi: ${foodEaten}`;
                recordScoreDisplay.textContent = `Kỷ lục: ${recordScore}`;
                gameOverDisplay.style.display = 'none';
                
                // Đặt thức ăn
                placeFood();
                
                // Bắt đầu các vòng lặp game
                if (gameLoop) clearInterval(gameLoop);
                if (foodMoveLoop) clearInterval(foodMoveLoop);
                if (timerLoop) clearInterval(timerLoop);
                
                gameLoop = setInterval(update, 16); // ~60fps
                foodMoveLoop = setInterval(moveFood, 500);
                timerLoop = setInterval(updateTimer, 1000);
                
                // Vẽ game lần đầu
                drawGame();
            }
            
            function drawGame() {
                // Xóa màn hình
                ctx.fillStyle = '#fff';
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                
                // Vẽ lưới (tùy chọn)
                ctx.strokeStyle = '#f0f0f0';
                ctx.lineWidth = 0.5;
                for (let i = 0; i < tileCount; i++) {
                    ctx.beginPath();
                    ctx.moveTo(i * gridSize, 0);
                    ctx.lineTo(i * gridSize, canvas.height);
                    ctx.stroke();
                    
                    ctx.beginPath();
                    ctx.moveTo(0, i * gridSize);
                    ctx.lineTo(canvas.width, i * gridSize);
                    ctx.stroke();
                }
                
                // Vẽ thức ăn
                ctx.fillStyle = '#ff3b30';
                ctx.beginPath();
                ctx.arc(
                    foodX * gridSize + gridSize/2, 
                    foodY * gridSize + gridSize/2, 
                    gridSize/2 - 2, 
                    0, 
                    Math.PI * 2
                );
                ctx.fill();
                
                // Vẽ rắn
                snake.forEach((segment, index) => {
                    if (index === 0) {
                        // Đầu rắn
                        ctx.fillStyle = '#007aff';
                        ctx.beginPath();
                        ctx.arc(
                            segment.x * gridSize + gridSize/2,
                            segment.y * gridSize + gridSize/2,
                            gridSize/2 - 1,
                            0,
                            Math.PI * 2
                        );
                        ctx.fill();
                        
                        // Mắt
                        ctx.fillStyle = 'white';
                        const eyeSize = gridSize/8;
                        const eyeOffset = gridSize/4;
                        
                        // Mắt trái
                        ctx.beginPath();
                        ctx.arc(
                            segment.x * gridSize + gridSize/2 - eyeOffset,
                            segment.y * gridSize + gridSize/2 - eyeOffset,
                            eyeSize,
                            0,
                            Math.PI * 2
                        );
                        ctx.fill();
                        
                        // Mắt phải
                        ctx.beginPath();
                        ctx.arc(
                            segment.x * gridSize + gridSize/2 + eyeOffset,
                            segment.y * gridSize + gridSize/2 - eyeOffset,
                            eyeSize,
                            0,
                            Math.PI * 2
                        );
                        ctx.fill();
                    } else {
                        // Thân rắn
                        ctx.fillStyle = `hsl(${200 + index % 20}, 100%, 50%)`;
                        ctx.beginPath();
                        ctx.roundRect(
                            segment.x * gridSize + 2,
                            segment.y * gridSize + 2,
                            gridSize - 4,
                            gridSize - 4,
                            5
                        );
                        ctx.fill();
                    }
                });
            }
            
            function moveSnake() {
                if (gameOver) return;
                
                const now = Date.now();
                if (now - lastMoveTime < moveDelay) return;
                lastMoveTime = now;
                
                const head = {x: snake[0].x + velocityX, y: snake[0].y + velocityY};
                
                // Kiểm tra va chạm tường
                if (head.x < 0 || head.x >= tileCount || head.y < 0 || head.y >= tileCount) {
                    endGame();
                    return;
                }
                
                // Kiểm tra va chạm với thân
                for (let i = 1; i < snake.length; i++) {
                    if (head.x === snake[i].x && head.y === snake[i].y) {
                        endGame();
                        return;
                    }
                }
                
                // Di chuyển rắn
                snake.unshift(head);
                
                // Kiểm tra ăn mồi
                if (head.x === foodX && head.y === foodY) {
                    score += 10;
                    foodEaten++;
                    scoreDisplay.textContent = `Điểm: ${score}`;
                    foodCountDisplay.textContent = `Mồi: ${foodEaten}`;
                    placeFood();
                    
                    // Tăng tốc độ sau mỗi 5 mồi
                    if (foodEaten % 5 === 0) {
                        moveDelay = Math.max(50, moveDelay - 10);
                    }
                } else {
                    snake.pop();
                }
            }
            
            function moveFood() {
                // Di chuyển thức ăn
                const newX = foodX + foodVelocityX;
                const newY = foodY + foodVelocityY;
                
                // Kiểm tra biên
                if (newX >= 0 && newX < tileCount) {
                    foodX = newX;
                } else {
                    foodVelocityX *= -1;
                }
                
                if (newY >= 0 && newY < tileCount) {
                    foodY = newY;
                } else {
                    foodVelocityY *= -1;
                }
                
                // 30% cơ hội đổi hướng
                if (Math.random() < 0.3) {
                    const directions = [-1, 0, 1];
                    foodVelocityX = directions[Math.floor(Math.random() * 3)];
                    foodVelocityY = directions[Math.floor(Math.random() * 3)];
                    
                    // Đảm bảo không đứng yên
                    if (foodVelocityX === 0 && foodVelocityY === 0) {
                        foodVelocityX = Math.random() < 0.5 ? -1 : 1;
                    }
                }
            }
            
            function placeFood() {
                let validPosition = false;
                
                while (!validPosition) {
                    foodX = Math.floor(Math.random() * tileCount);
                    foodY = Math.floor(Math.random() * tileCount);
                    
                    validPosition = true;
                    // Kiểm tra không trùng rắn
                    for (let segment of snake) {
                        if (segment.x === foodX && segment.y === foodY) {
                            validPosition = false;
                            break;
                        }
                    }
                }
                
                // Đặt hướng di chuyển ngẫu nhiên
                const directions = [-1, 0, 1];
                foodVelocityX = directions[Math.floor(Math.random() * 3)];
                foodVelocityY = directions[Math.floor(Math.random() * 3)];
                
                if (foodVelocityX === 0 && foodVelocityY === 0) {
                    foodVelocityX = Math.random() < 0.5 ? -1 : 1;
                }
            }
            
            function updateTimer() {
                const now = Date.now();
                const elapsed = now - gameStartTime;
                const remaining = Math.max(0, gameDuration - elapsed);
                
                const minutes = Math.floor(remaining / 60000);
                const seconds = Math.floor((remaining % 60000) / 1000);
                
                timerDisplay.textContent = `Thời gian: ${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
                
                if (remaining <= 0) {
                    endGame();
                }
            }
            
            function endGame() {
                gameOver = true;
                clearInterval(gameLoop);
                clearInterval(foodMoveLoop);
                clearInterval(timerLoop);
                
                // Cập nhật kỷ lục
                if (score > recordScore) {
                    recordScore = score;
                    recordFood = foodEaten;
                    localStorage.setItem('snakeRecordScore', recordScore);
                    localStorage.setItem('snakeRecordFood', recordFood);
                }
                
                finalScoreDisplay.textContent = `Điểm: ${score} | Mồi: ${foodEaten}`;
                recordDisplay.textContent = `Kỷ lục: ${recordScore} điểm (${recordFood} mồi)`;
                gameOverDisplay.style.display = 'block';
            }
            
            function update() {
                moveSnake();
                drawGame();
            }
            
            // Xử lý điều khiển
            function changeDirection(newVelocityX, newVelocityY) {
                // Ngăn di chuyển ngược hướng hiện tại
                if (!(velocityX !== 0 && newVelocityX === -velocityX) {
                    velocityX = newVelocityX;
                }
                if (!(velocityY !== 0 && newVelocityY === -velocityY)) {
                    velocityY = newVelocityY;
                }
                
                // Di chuyển ngay lập tức khi ấn nút
                moveSnake();
            }
            
            // Sự kiện nút điều khiển
            upBtn.addEventListener('touchstart', (e) => {
                e.preventDefault();
                changeDirection(0, -1);
            });
            
            leftBtn.addEventListener('touchstart', (e) => {
                e.preventDefault();
                changeDirection(-1, 0);
            });
            
            rightBtn.addEventListener('touchstart', (e) => {
                e.preventDefault();
                changeDirection(1, 0);
            });
            
            downBtn.addEventListener('touchstart', (e) => {
                e.preventDefault();
                changeDirection(0, 1);
            });
            
            // Sự kiện bàn phím
            document.addEventListener('keydown', (e) => {
                switch (e.key) {
                    case 'ArrowUp':
                    case 'w':
                    case 'W':
                        changeDirection(0, -1);
                        break;
                    case 'ArrowDown':
                    case 's':
                    case 'S':
                        changeDirection(0, 1);
                        break;
                    case 'ArrowLeft':
                    case 'a':
                    case 'A':
                        changeDirection(-1, 0);
                        break;
                    case 'ArrowRight':
                    case 'd':
                    case 'D':
                        changeDirection(1, 0);
                        break;
                }
            });
            
            // Sự kiện chơi lại
            restartBtn.addEventListener('click', initGame);
            
            // Ngăn scroll khi chạm vào nút điều khiển trên mobile
            document.querySelectorAll('.control-btn').forEach(btn => {
                btn.addEventListener('touchstart', (e) => {
                    e.preventDefault();
                }, { passive: false });
            });
        });
    </script>
</body>
</html>
