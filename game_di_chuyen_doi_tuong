<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Game Di Chuyển Nhân Vật - Hướng Đối Tượng</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            color: #fff;
            overflow-x: hidden;
        }
        
        .header {
            text-align: center;
            margin-bottom: 20px;
            width: 100%;
            max-width: 800px;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.5);
            background: linear-gradient(to right, #ff9966, #ff5e62);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-bottom: 15px;
        }
        
        .game-container {
            position: relative;
            width: 800px;
            height: 500px;
            border: 3px solid #ffcc00;
            border-radius: 10px;
            overflow: hidden;
            background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="100" height="100" viewBox="0 0 100 100"><rect width="100" height="100" fill="%231c1c44"/><path d="M0 0L100 100M100 0L0 100" stroke="%23303070" stroke-width="0.5"/></svg>');
            box-shadow: 0 10px 30px rgba(0,0,0,0.5);
        }
        
        .game-info {
            background: rgba(0, 0, 0, 0.7);
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            width: 800px;
            max-width: 100%;
        }
        
        .info-title {
            font-size: 1.4rem;
            margin-bottom: 15px;
            color: #ffcc00;
            display: flex;
            align-items: center;
        }
        
        .info-title svg {
            margin-right: 10px;
        }
        
        .info-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 15px;
        }
        
        .info-item {
            background: rgba(255, 255, 255, 0.1);
            padding: 12px;
            border-radius: 8px;
            display: flex;
            align-items: center;
        }
        
        .info-item svg {
            margin-right: 10px;
            color: #ff9966;
        }
        
        .controls {
            display: flex;
            justify-content: center;
            gap: 20px;
            margin-top: 20px;
            flex-wrap: wrap;
        }
        
        button {
            background: linear-gradient(to right, #ff9966, #ff5e62);
            border: none;
            padding: 12px 25px;
            border-radius: 50px;
            color: white;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s;
            font-size: 1rem;
            display: flex;
            align-items: center;
            gap: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.3);
        }
        
        button:hover {
            transform: translateY(-3px);
            box-shadow: 0 6px 12px rgba(0,0,0,0.4);
        }
        
        button:active {
            transform: translateY(1px);
        }
        
        .speed-control {
            display: flex;
            align-items: center;
            gap: 15px;
            background: rgba(0, 0, 0, 0.5);
            padding: 10px 20px;
            border-radius: 50px;
            margin-top: 15px;
        }
        
        .speed-control label {
            display: flex;
            align-items: center;
            gap: 5px;
        }
        
        input[type="range"] {
            width: 200px;
            height: 8px;
            border-radius: 4px;
            background: #444;
            outline: none;
        }
        
        .character {
            position: absolute;
            transition: transform 0.1s;
            z-index: 10;
        }
        
        .character img {
            width: 70px;
            height: 70px;
            object-fit: contain;
        }
        
        .obstacle {
            position: absolute;
            width: 50px;
            height: 50px;
            background-color: #ff5e62;
            border-radius: 8px;
            display: flex;
            justify-content: center;
            align-items: center;
            color: white;
            font-weight: bold;
        }
        
        .coin {
            position: absolute;
            width: 30px;
            height: 30px;
            background: radial-gradient(circle at 30% 30%, #ffd700, #ff9800);
            border-radius: 50%;
            box-shadow: 0 0 10px #ffd700;
            animation: pulse 1.5s infinite alternate;
        }
        
        @keyframes pulse {
            from { transform: scale(1); }
            to { transform: scale(1.2); }
        }
        
        .score-board {
            position: absolute;
            top: 15px;
            right: 15px;
            background: rgba(0, 0, 0, 0.7);
            padding: 10px 20px;
            border-radius: 20px;
            font-size: 1.2rem;
            display: flex;
            align-items: center;
            gap: 10px;
        }
        
        .instructions {
            background: rgba(255, 255, 255, 0.1);
            padding: 15px;
            border-radius: 10px;
            margin-top: 20px;
            width: 800px;
        }
        
        .instructions h3 {
            margin-bottom: 10px;
            color: #ffcc00;
        }
        
        .instructions ul {
            padding-left: 20px;
        }
        
        .instructions li {
            margin-bottom: 8px;
            line-height: 1.5;
        }
        
        .highlight {
            background: rgba(255, 204, 0, 0.2);
            padding: 2px 6px;
            border-radius: 4px;
            font-weight: bold;
        }
        
        .code-block {
            background: rgba(0, 0, 0, 0.7);
            padding: 15px;
            border-radius: 10px;
            margin-top: 20px;
            font-family: monospace;
            width: 800px;
            overflow-x: auto;
            line-height: 1.5;
        }
        
        .code-comment {
            color: #0f0;
        }
        
        @media (max-width: 850px) {
            .game-container, .game-info, .instructions, .code-block {
                width: 95%;
            }
            
            .game-container {
                height: 400px;
            }
            
            .info-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>Game Di Chuyển Nhân Vật</h1>
        <p class="subtitle">Luyện tập lập trình hướng đối tượng trong JavaScript</p>
    </div>
    
    <div class="game-container" id="gameContainer">
        <div class="score-board">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <polyline points="12 6 12 12 16 14"></polyline>
            </svg>
            <span id="timer">60</span>s
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" style="margin-left: 15px;">
                <path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"></path>
            </svg>
            <span id="score">0</span>
        </div>
    </div>
    
    <div class="controls">
        <button id="startBtn">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <polygon points="5 3 19 12 5 21 5 3"></polygon>
            </svg>
            Bắt đầu Game
        </button>
        <button id="resetBtn">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <path d="M2.5 2v6h6M2.66 15.57a10 10 0 1 0 .57-8.38"/>
            </svg>
            Chơi lại
        </button>
    </div>
    
    <div class="speed-control">
        <label>
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="18" cy="18" r="3"></circle>
                <circle cx="6" cy="6" r="3"></circle>
                <path d="M6 21V9a9 9 0 0 0 9 9"></path>
            </svg>
            Tốc độ nhân vật:
        </label>
        <input type="range" id="speedControl" min="5" max="50" value="20">
        <span id="speedValue">20</span>
    </div>
    
    <div class="game-info">
        <h2 class="info-title">
            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="12" y1="16" x2="12" y2="12"></line>
                <line x1="12" y1="8" x2="12.01" y2="8"></line>
            </svg>
            Thông tin game
        </h2>
        <div class="info-grid">
            <div class="info-item">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M17 3a2.85 2.83 0 1 1 4 4L7.5 20.5 2 22l1.5-5.5Z"></path>
                </svg>
                Nhân vật chính: <strong>Ninja</strong>
            </div>
            <div class="info-item">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M3 3v18h18"></path>
                    <path d="m19 9-5 5-4-4-3 3"></path>
                </svg>
                Di chuyển: <strong>Phím mũi tên</strong>
            </div>
            <div class="info-item">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <polyline points="12 6 12 12 7.5 12"></polyline>
                </svg>
                Thời gian: <strong>60 giây</strong>
            </div>
            <div class="info-item">
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M12 2.69l5.66 5.66a8 8 0 1 1-11.31 0z"></path>
                </svg>
                Mục tiêu: <strong>Thu thập đồng xu</strong>
            </div>
        </div>
    </div>
    
    <div class="instructions">
        <h3>Hướng dẫn chơi:</h3>
        <ul>
            <li>Sử dụng <span class="highlight">phím mũi tên</span> (lên, xuống, trái, phải) để di chuyển nhân vật</li>
            <li>Thu thập càng nhiều đồng xu vàng càng tốt</li>
            <li>Tránh chạm vào các chướng ngại vật màu đỏ</li>
            <li>Bạn có thể điều chỉnh tốc độ di chuyển bằng thanh trượt bên trên</li>
            <li>Bấm <span class="highlight">Bắt đầu Game</span> để bắt đầu và <span class="highlight">Chơi lại</span> để reset game</li>
        </ul>
    </div>
    
    <div class="code-block">
        <span class="code-comment">// Định nghĩa lớp Hero (Nhân vật chính)</span><br>
        class Hero {<br>
        &nbsp;&nbsp;constructor(gameContainer, speed = 20) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.gameContainer = gameContainer;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.x = 400;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.y = 250;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.speed = speed;<br>
        <br>
        &nbsp;&nbsp;&nbsp;&nbsp;<span class="code-comment">// Tạo phần tử nhân vật</span><br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.element = document.createElement('div');<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.element.className = 'character';<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.element.innerHTML = '&lt;img src="https://i.ibb.co/HXjf2J4/ninja.png" alt="Ninja"&gt;';<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.gameContainer.appendChild(this.element);<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.updatePosition();<br>
        &nbsp;&nbsp;}<br>
        <br>
        &nbsp;&nbsp;<span class="code-comment">// Cập nhật vị trí của nhân vật</span><br>
        &nbsp;&nbsp;updatePosition() {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.element.style.left = `${this.x}px`;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.element.style.top = `${this.y}px`;<br>
        &nbsp;&nbsp;}<br>
        <br>
        &nbsp;&nbsp;<span class="code-comment">// Di chuyển lên trên</span><br>
        &nbsp;&nbsp;moveUp() {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.y = Math.max(0, this.y - this.speed);<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.updatePosition();<br>
        &nbsp;&nbsp;}<br>
        <br>
        &nbsp;&nbsp;<span class="code-comment">// Di chuyển xuống dưới</span><br>
        &nbsp;&nbsp;moveDown() {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;const maxY = this.gameContainer.clientHeight - this.element.offsetHeight;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.y = Math.min(maxY, this.y + this.speed);<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.updatePosition();<br>
        &nbsp;&nbsp;}<br>
        <br>
        &nbsp;&nbsp;<span class="code-comment">// Di chuyển sang trái</span><br>
        &nbsp;&nbsp;moveLeft() {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.x = Math.max(0, this.x - this.speed);<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.updatePosition();<br>
        &nbsp;&nbsp;}<br>
        <br>
        &nbsp;&nbsp;<span class="code-comment">// Di chuyển sang phải</span><br>
        &nbsp;&nbsp;moveRight() {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;const maxX = this.gameContainer.clientWidth - this.element.offsetWidth;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.x = Math.min(maxX, this.x + this.speed);<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.updatePosition();<br>
        &nbsp;&nbsp;}<br>
        <br>
        &nbsp;&nbsp;<span class="code-comment">// Cập nhật tốc độ di chuyển</span><br>
        &nbsp;&nbsp;setSpeed(newSpeed) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;this.speed = newSpeed;<br>
        &nbsp;&nbsp;}<br>
        }<br>
        <br>
        <span class="code-comment">// Khởi tạo game và nhân vật khi tài liệu sẵn sàng</span><br>
        document.addEventListener('DOMContentLoaded', () => {<br>
        &nbsp;&nbsp;const gameContainer = document.getElementById('gameContainer');<br>
        &nbsp;&nbsp;const hero = new Hero(gameContainer, 20);<br>
        <br>
        &nbsp;&nbsp;<span class="code-comment">// Xử lý sự kiện bàn phím</span><br>
        &nbsp;&nbsp;document.addEventListener('keydown', (e) => {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;switch(e.key) {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'ArrowUp': hero.moveUp(); break;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'ArrowDown': hero.moveDown(); break;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'ArrowLeft': hero.moveLeft(); break;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;case 'ArrowRight': hero.moveRight(); break;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;}<br>
        &nbsp;&nbsp;});<br>
        <br>
        &nbsp;&nbsp;<span class="code-comment">// Xử lý thay đổi tốc độ</span><br>
        &nbsp;&nbsp;const speedControl = document.getElementById('speedControl');<br>
        &nbsp;&nbsp;speedControl.addEventListener('input', () => {<br>
        &nbsp;&nbsp;&nbsp;&nbsp;const newSpeed = parseInt(speedControl.value);<br>
        &nbsp;&nbsp;&nbsp;&nbsp;document.getElementById('speedValue').textContent = newSpeed;<br>
        &nbsp;&nbsp;&nbsp;&nbsp;hero.setSpeed(newSpeed);<br>
        &nbsp;&nbsp;});<br>
        });
    </div>

    <script>
        // Lớp Hero (Nhân vật chính)
        class Hero {
            constructor(gameContainer, speed = 20) {
                this.gameContainer = gameContainer;
                this.x = 400;
                this.y = 250;
                this.speed = speed;
                
                // Tạo phần tử nhân vật
                this.element = document.createElement('div');
                this.element.className = 'character';
                this.element.innerHTML = '<img src="https://i.ibb.co/HXjf2J4/ninja.png" alt="Ninja">';
                this.gameContainer.appendChild(this.element);
                this.updatePosition();
            }
            
            // Cập nhật vị trí của nhân vật
            updatePosition() {
                this.element.style.left = `${this.x}px`;
                this.element.style.top = `${this.y}px`;
            }
            
            // Di chuyển lên trên
            moveUp() {
                this.y = Math.max(0, this.y - this.speed);
                this.updatePosition();
            }
            
            // Di chuyển xuống dưới
            moveDown() {
                const maxY = this.gameContainer.clientHeight - this.element.offsetHeight;
                this.y = Math.min(maxY, this.y + this.speed);
                this.updatePosition();
            }
            
            // Di chuyển sang trái
            moveLeft() {
                this.x = Math.max(0, this.x - this.speed);
                this.updatePosition();
            }
            
            // Di chuyển sang phải
            moveRight() {
                const maxX = this.gameContainer.clientWidth - this.element.offsetWidth;
                this.x = Math.min(maxX, this.x + this.speed);
                this.updatePosition();
            }
            
            // Cập nhật tốc độ di chuyển
            setSpeed(newSpeed) {
                this.speed = newSpeed;
            }
            
            // Lấy tọa độ và kích thước để kiểm tra va chạm
            getRect() {
                return {
                    x: this.x,
                    y: this.y,
                    width: this.element.offsetWidth,
                    height: this.element.offsetHeight
                };
            }
        }
        
        // Lớp Coin (Đồng xu)
        class Coin {
            constructor(gameContainer) {
                this.gameContainer = gameContainer;
                
                // Tạo vị trí ngẫu nhiên
                const containerWidth = gameContainer.clientWidth;
                const containerHeight = gameContainer.clientHeight;
                this.x = Math.random() * (containerWidth - 40);
                this.y = Math.random() * (containerHeight - 40);
                
                // Tạo phần tử đồng xu
                this.element = document.createElement('div');
                this.element.className = 'coin';
                this.element.style.left = `${this.x}px`;
                this.element.style.top = `${this.y}px`;
                this.gameContainer.appendChild(this.element);
            }
            
            // Lấy tọa độ và kích thước để kiểm tra va chạm
            getRect() {
                return {
                    x: this.x,
                    y: this.y,
                    width: 30,
                    height: 30
                };
            }
            
            // Loại bỏ đồng xu khỏi màn hình
            remove() {
                this.element.remove();
            }
        }
        
        // Lớp Obstacle (Chướng ngại vật)
        class Obstacle {
            constructor(gameContainer, x, y) {
                this.gameContainer = gameContainer;
                this.x = x;
                this.y = y;
                
                // Tạo phần tử chướng ngại vật
                this.element = document.createElement('div');
                this.element.className = 'obstacle';
                this.element.style.left = `${this.x}px`;
                this.element.style.top = `${this.y}px`;
                this.element.innerHTML = '☠️';
                this.gameContainer.appendChild(this.element);
            }
            
            // Lấy tọa độ và kích thước để kiểm tra va chạm
            getRect() {
                return {
                    x: this.x,
                    y: this.y,
                    width: 50,
                    height: 50
                };
            }
        }
        
        // Lớp Game (Quản lý trò chơi)
        class Game {
            constructor() {
                this.gameContainer = document.getElementById('gameContainer');
                this.hero = new Hero(this.gameContainer, 20);
                this.coins = [];
                this.obstacles = [];
                this.score = 0;
                this.timer = 60;
                this.gameActive = false;
                this.timerInterval = null;
                
                // Khởi tạo các nút điều khiển
                this.startBtn = document.getElementById('startBtn');
                this.resetBtn = document.getElementById('resetBtn');
                this.speedControl = document.getElementById('speedControl');
                this.speedValue = document.getElementById('speedValue');
                this.scoreElement = document.getElementById('score');
                this.timerElement = document.getElementById('timer');
                
                // Thêm sự kiện
                this.startBtn.addEventListener('click', () => this.startGame());
                this.resetBtn.addEventListener('click', () => this.resetGame());
                this.speedControl.addEventListener('input', () => this.updateSpeed());
                
                // Thêm sự kiện bàn phím
                document.addEventListener('keydown', (e) => this.handleKeyPress(e));
            }
            
            // Bắt đầu game
            startGame() {
                if (this.gameActive) return;
                
                this.gameActive = true;
                this.score = 0;
                this.timer = 60;
                this.scoreElement.textContent = this.score;
                this.timerElement.textContent = this.timer;
                
                // Tạo chướng ngại vật
                this.createObstacles();
                
                // Tạo đồng xu
                this.createCoins();
                
                // Bắt đầu đếm ngược
                this.startTimer();
            }
            
            // Reset game
            resetGame() {
                this.gameActive = false;
                clearInterval(this.timerInterval);
                
                // Xóa tất cả đồng xu và chướng ngại vật
                this.coins.forEach(coin => coin.remove());
                this.obstacles.forEach(obstacle => obstacle.element.remove());
                
                this.coins = [];
                this.obstacles = [];
                
                // Reset vị trí nhân vật
                this.hero.x = 400;
                this.hero.y = 250;
                this.hero.updatePosition();
                
                this.score = 0;
                this.timer = 60;
                this.scoreElement.textContent = this.score;
                this.timerElement.textContent = this.timer;
            }
            
            // Cập nhật tốc độ
            updateSpeed() {
                const newSpeed = parseInt(this.speedControl.value);
                this.speedValue.textContent = newSpeed;
                this.hero.setSpeed(newSpeed);
            }
            
            // Tạo chướng ngại vật
            createObstacles() {
                // Xóa chướng ngại vật cũ nếu có
                this.obstacles.forEach(obstacle => obstacle.element.remove());
                this.obstacles = [];
                
                // Tạo chướng ngại vật mới
                const positions = [
                    {x: 100, y: 100}, {x: 600, y: 100}, {x: 300, y: 300},
                    {x: 100, y: 400}, {x: 600, y: 400}, {x: 400, y: 200}
                ];
                
                positions.forEach(pos => {
                    this.obstacles.push(new Obstacle(this.gameContainer, pos.x, pos.y));
                });
            }
            
            // Tạo đồng xu
            createCoins() {
                // Xóa đồng xu cũ nếu có
                this.coins.forEach(coin => coin.remove());
                this.coins = [];
                
                // Tạo 5 đồng xu mới
                for (let i = 0; i < 5; i++) {
                    this.coins.push(new Coin(this.gameContainer));
                }
            }
            
            // Bắt đầu đếm ngược
            startTimer() {
                clearInterval(this.timerInterval);
                this.timerInterval = setInterval(() => {
                    this.timer--;
                    this.timerElement.textContent = this.timer;
                    
                    if (this.timer <= 0) {
                        this.endGame();
                    }
                }, 1000);
            }
            
            // Kết thúc game
            endGame() {
                this.gameActive = false;
                clearInterval(this.timerInterval);
                alert(`Game Over! Điểm của bạn: ${this.score}`);
            }
            
            // Xử lý sự kiện bàn phím
            handleKeyPress(e) {
                if (!this.gameActive) return;
                
                switch(e.key) {
                    case 'ArrowUp': this.hero.moveUp(); break;
                    case 'ArrowDown': this.hero.moveDown(); break;
                    case 'ArrowLeft': this.hero.moveLeft(); break;
                    case 'ArrowRight': this.hero.moveRight(); break;
                }
                
                // Kiểm tra va chạm
                this.checkCollisions();
            }
            
            // Kiểm tra va chạm
            checkCollisions() {
                const heroRect = this.hero.getRect();
                
                // Kiểm tra va chạm với đồng xu
                this.coins.forEach((coin, index) => {
                    const coinRect = coin.getRect();
                    
                    if (this.checkRectCollision(heroRect, coinRect)) {
                        // Tăng điểm
                        this.score++;
                        this.scoreElement.textContent = this.score;
                        
                        // Xóa đồng xu
                        coin.remove();
                        this.coins.splice(index, 1);
                        
                        // Tạo đồng xu mới
                        this.coins.push(new Coin(this.gameContainer));
                    }
                });
                
                // Kiểm tra va chạm với chướng ngại vật
                this.obstacles.forEach(obstacle => {
                    const obstacleRect = obstacle.getRect();
                    
                    if (this.checkRectCollision(heroRect, obstacleRect)) {
                        // Giảm điểm
                        this.score = Math.max(0, this.score - 1);
                        this.scoreElement.textContent = this.score;
                    }
                });
            }
            
            // Kiểm tra va chạm giữa hai hình chữ nhật
            checkRectCollision(rect1, rect2) {
                return (
                    rect1.x < rect2.x + rect2.width &&
                    rect1.x + rect1.width > rect2.x &&
                    rect1.y < rect2.y + rect2.height &&
                    rect1.y + rect1.height > rect2.y
                );
            }
        }
        
        // Khởi tạo game khi tài liệu sẵn sàng
        document.addEventListener('DOMContentLoaded', () => {
            const game = new Game();
        });
    </script>
</body>
</html>
