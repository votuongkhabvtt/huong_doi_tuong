import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.ticker import MultipleLocator
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="·ª®ng d·ª•ng Theo d√µi Ph√°t tri·ªÉn Tr·∫ª em",
    page_icon="üë∂",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T√πy ch·ªânh CSS
st.markdown("""
    <style>
    .header {
        background-color: #4b8bff;
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 1.5rem;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    .footer {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        margin-top: 2rem;
        text-align: center;
        font-size: 0.9rem;
        color: #555;
    }
    .metric-card {
        background-color: #f8f9fa;
        border-radius: 10px;
        padding: 1.5rem;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        transition: transform 0.3s;
    }
    .metric-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 6px 12px rgba(0,0,0,0.1);
    }
    .highlight {
        background: linear-gradient(120deg, #e0f7fa, #bbdefb);
        border-radius: 5px;
        padding: 0.5rem;
        font-weight: bold;
    }
    .tab-content {
        padding: 1.5rem;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0,0,0,0.05);
        margin-top: 1rem;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 10px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        padding: 0 25px;
        border-radius: 10px 10px 0 0 !important;
        background-color: #f0f2f6 !important;
        font-weight: 600;
    }
    .stTabs [aria-selected="true"] {
        background-color: #4b8bff !important;
        color: white !important;
    }
    </style>
    """, unsafe_allow_html=True)

# Header
st.markdown("""
    <div class="header">
        <h1 style="margin:0;">üë∂ ·ª®ng d·ª•ng Theo d√µi Ph√°t tri·ªÉn Tr·∫ª em</h1>
        <p style="margin:0; opacity:0.9;">C√¥ng c·ª• to√†n di·ªán d·ª± ƒëo√°n chi·ªÅu cao tr∆∞·ªüng th√†nh v√† theo d√µi ch·ªâ s·ªë BMI</p>
    </div>
    """, unsafe_allow_html=True)

# T·∫£i d·ªØ li·ªáu
@st.cache_data
def load_data():
    # D·ªØ li·ªáu chi·ªÅu cao
    url_height = "https://raw.githubusercontent.com/votuongkhabvtt/huong_doi_tuong/main/do_thi_so_sanh_chieu_cao_BMI/CDC_chieu_cao.csv"
    df_height = pd.read_csv(url_height)
    
    # D·ªØ li·ªáu BMI
    url_bmi = "https://raw.githubusercontent.com/votuongkhabvtt/huong_doi_tuong/main/do_thi_so_sanh_chieu_cao_BMI/CDC_BMI.csv"
    df_bmi = pd.read_csv(url_bmi)
    
    return df_height, df_bmi

df_height, df_bmi = load_data()

# C√°c h√†m ti·ªán √≠ch
def calculate_bmi(weight, height):
    """T√≠nh ch·ªâ s·ªë BMI t·ª´ c√¢n n·∫∑ng (kg) v√† chi·ªÅu cao (m)"""
    if height > 0:
        return weight / ((height / 100) ** 2)
    return 0

def interpret_bmi(bmi, age_years, gender):
    """Gi·∫£i th√≠ch k·∫øt qu·∫£ BMI theo tu·ªïi v√† gi·ªõi t√≠nh"""
    if age_years < 2 or age_years > 20:
        return "Kh√¥ng √°p d·ª•ng cho ƒë·ªô tu·ªïi n√†y"
    
    if gender == "Nam":
        if bmi < 14.5:
            return "Thi·∫øu c√¢n"
        elif 14.5 <= bmi < 18.5:
            return "B√¨nh th∆∞·ªùng"
        elif 18.5 <= bmi < 22:
            return "Th·ª´a c√¢n"
        elif 22 <= bmi < 25:
            return "B√©o ph√¨ ƒë·ªô 1"
        else:
            return "B√©o ph√¨ ƒë·ªô 2"
    else:
        if bmi < 14:
            return "Thi·∫øu c√¢n"
        elif 14 <= bmi < 18:
            return "B√¨nh th∆∞·ªùng"
        elif 18 <= bmi < 21:
            return "Th·ª´a c√¢n"
        elif 21 <= bmi < 24:
            return "B√©o ph√¨ ƒë·ªô 1"
        else:
            return "B√©o ph√¨ ƒë·ªô 2"

def predict_height_khamis_roche(current_height, age_months, weight, gender):
    """D·ª± ƒëo√°n chi·ªÅu cao tr∆∞·ªüng th√†nh s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p Khamis-Roche"""
    # ƒê√¢y l√† ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n h√≥a, trong th·ª±c t·∫ø c·∫ßn s·ª≠ d·ª•ng c√¥ng th·ª©c ch√≠nh x√°c
    gender_factor = 13 if gender == "Nam" else 11
    return current_height + (gender_factor * (1 - (age_months / 216)))

def predict_height_tanner(current_height, bone_age, chronological_age):
    """D·ª± ƒëo√°n chi·ªÅu cao tr∆∞·ªüng th√†nh s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p TW2"""
    # Gi·∫£ ƒë·ªãnh ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n
    return current_height * (1 + ((18 - chronological_age) / chronological_age))

def predict_height_bayley(current_height, height_velocity, age_years):
    """D·ª± ƒëo√°n chi·ªÅu cao tr∆∞·ªüng th√†nh s·ª≠ d·ª•ng ph∆∞∆°ng ph√°p Bayley-Pinneau"""
    # Gi·∫£ ƒë·ªãnh ph∆∞∆°ng ph√°p ƒë∆°n gi·∫£n
    return current_height + (height_velocity * (18 - age_years))

# T·∫°o c√°c tab
tab1, tab2 = st.tabs(["üìè D·ª± ƒëo√°n Chi·ªÅu cao Tr∆∞·ªüng th√†nh", "üìä Theo d√µi TƒÉng tr∆∞·ªüng v√† BMI"])

with tab1:
    st.subheader("D·ª± ƒëo√°n Chi·ªÅu cao Tr∆∞·ªüng th√†nh")
    st.write("Nh·∫≠p th√¥ng tin c·ªßa tr·∫ª ƒë·ªÉ d·ª± ƒëo√°n chi·ªÅu cao khi tr∆∞·ªüng th√†nh")
    
    with st.container():
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            age_months = st.number_input("Tu·ªïi (th√°ng)", min_value=0, max_value=240, value=60)
        with col2:
            current_height = st.number_input("Chi·ªÅu cao hi·ªán t·∫°i (cm)", min_value=0.0, value=100.0, step=0.1)
        with col3:
            weight = st.number_input("C√¢n n·∫∑ng (kg)", min_value=0.0, value=15.0, step=0.1)
        with col4:
            gender = st.radio("Gi·ªõi t√≠nh", ["Nam", "N·ªØ"], index=0, horizontal=True)
    
    # T√≠nh to√°n
    bmi = calculate_bmi(weight, current_height)
    height_khamis = predict_height_khamis_roche(current_height, age_months, weight, gender)
    height_tanner = predict_height_tanner(current_height, age_months/12, age_months/12)
    height_bayley = predict_height_bayley(current_height, 5, age_months/12)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    st.markdown("---")
    st.subheader("K·∫øt qu·∫£ D·ª± ƒëo√°n")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        st.metric("Ph∆∞∆°ng ph√°p Khamis-Roche", value=f"{height_khamis:.1f} cm")
        st.caption("Ph∆∞∆°ng ph√°p d·ª±a tr√™n chi·ªÅu cao, c√¢n n·∫∑ng, tu·ªïi v√† gi·ªõi t√≠nh")
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        st.metric("Ph∆∞∆°ng ph√°p TW2 (Tanner)", value=f"{height_tanner:.1f} cm")
        st.caption("D·ª±a tr√™n tu·ªïi x∆∞∆°ng v√† tu·ªïi th·ªùi gian")
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col3:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        st.metric("Ph∆∞∆°ng ph√°p Bayley-Pinneau", value=f"{height_bayley:.1f} cm")
        st.caption("D·ª±a tr√™n t·ªëc ƒë·ªô tƒÉng tr∆∞·ªüng chi·ªÅu cao hi·ªán t·∫°i")
        st.markdown("</div>", unsafe_allow_html=True)
    
    st.markdown("---")
    st.subheader("Th√¥ng tin B·ªï sung")
    
    col1, col2 = st.columns(2)
    with col1:
        st.markdown("**Ch·ªâ s·ªë BMI hi·ªán t·∫°i**")
        st.markdown(f"<div class='highlight'>{bmi:.1f}</div>", unsafe_allow_html=True)
        st.caption(interpret_bmi(bmi, age_months/12, gender))
    
    with col2:
        st.markdown("**Nh·∫≠n x√©t**")
        if bmi < 16:
            st.warning("Tr·∫ª c√≥ th·ªÉ ƒëang trong t√¨nh tr·∫°ng thi·∫øu c√¢n. C·∫ßn t∆∞ v·∫•n dinh d∆∞·ª°ng.")
        elif bmi > 22:
            st.warning("Tr·∫ª c√≥ th·ªÉ ƒëang trong t√¨nh tr·∫°ng th·ª´a c√¢n. C·∫ßn ƒëi·ªÅu ch·ªânh ch·∫ø ƒë·ªô ƒÉn v√† v·∫≠n ƒë·ªông.")
        else:
            st.success("Ch·ªâ s·ªë BMI trong ph·∫°m vi b√¨nh th∆∞·ªùng. Duy tr√¨ ch·∫ø ƒë·ªô dinh d∆∞·ª°ng h·ª£p l√Ω.")
    
    # Bi·ªÉu ƒë·ªì d·ª± ƒëo√°n
    st.markdown("---")
    st.subheader("Bi·ªÉu ƒë·ªì D·ª± ƒëo√°n Chi·ªÅu cao")
    
    methods = ['Khamis-Roche', 'Tanner', 'Bayley-Pinneau']
    heights = [height_khamis, height_tanner, height_bayley]
    
    fig = go.Figure()
    fig.add_trace(go.Bar(
        x=methods,
        y=heights,
        marker_color=['#4b8bff', '#36c1b6', '#ff6b6b'],
        text=[f"{h:.1f} cm" for h in heights],
        textposition='auto'
    ))
    
    fig.update_layout(
        title='So s√°nh D·ª± ƒëo√°n Chi·ªÅu cao Tr∆∞·ªüng th√†nh',
        yaxis_title='Chi·ªÅu cao (cm)',
        xaxis_title='Ph∆∞∆°ng ph√°p',
        template='plotly_white',
        height=400
    )
    
    st.plotly_chart(fig, use_container_width=True)

with tab2:
    st.subheader("Theo d√µi TƒÉng tr∆∞·ªüng v√† BMI")
    st.write("Theo d√µi s·ª± ph√°t tri·ªÉn c·ªßa tr·∫ª so v·ªõi ti√™u chu·∫©n CDC")
    
    with st.container():
        col1, col2, col3 = st.columns(3)
        with col1:
            age_years = st.number_input("Tu·ªïi (nƒÉm)", min_value=0, max_value=18, value=5, key='tab2_age_years')
            age_months = st.number_input("Tu·ªïi (th√°ng)", min_value=0, max_value=11, value=0, key='tab2_age_months')
        with col2:
            current_height = st.number_input("Chi·ªÅu cao (cm)", min_value=0.0, value=110.0, step=0.1, key='tab2_height')
        with col3:
            weight = st.number_input("C√¢n n·∫∑ng (kg)", min_value=0.0, value=18.0, step=0.1, key='tab2_weight')
            gender = st.radio("Gi·ªõi t√≠nh", ["Nam", "N·ªØ"], index=0, horizontal=True, key='tab2_gender')
    
    # T√≠nh to√°n
    total_months = age_years * 12 + age_months
    bmi = calculate_bmi(weight, current_height)
    bmi_category = interpret_bmi(bmi, age_years, gender)
    
    # Hi·ªÉn th·ªã k·∫øt qu·∫£
    st.markdown("---")
    st.subheader("K·∫øt qu·∫£ ƒê√°nh gi√°")
    
    col1, col2, col3 = st.columns(3)
    with col1:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        st.metric("Tu·ªïi", value=f"{age_years} nƒÉm {age_months} th√°ng")
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col2:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        st.metric("Chi·ªÅu cao", value=f"{current_height} cm")
        st.markdown("</div>", unsafe_allow_html=True)
    
    with col3:
        st.markdown("<div class='metric-card'>", unsafe_allow_html=True)
        st.metric("BMI", value=f"{bmi:.1f} ({bmi_category})")
        st.markdown("</div>", unsafe_allow_html=True)
    
    # V·∫Ω bi·ªÉu ƒë·ªì
    st.markdown("---")
    st.subheader("Bi·ªÉu ƒë·ªì TƒÉng tr∆∞·ªüng")
    
    # L·ªçc d·ªØ li·ªáu theo gi·ªõi t√≠nh
    sex_filter = 'boys' if gender == "Nam" else 'girls'
    df_height_sex = df_height[df_height['Sex'] == sex_filter]
    df_bmi_sex = df_bmi[df_bmi['Sex'] == sex_filter]
    
    # T·∫°o bi·ªÉu ƒë·ªì
    fig = make_subplots(rows=1, cols=2, subplot_titles=('Chi·ªÅu cao theo Tu·ªïi', 'BMI theo Tu·ªïi'))
    
    # Bi·ªÉu ƒë·ªì chi·ªÅu cao
    percentiles = [3, 5, 10, 25, 50, 75, 90, 95, 97]
    for p in percentiles:
        fig.add_trace(go.Scatter(
            x=df_height_sex['Agemos'], 
            y=df_height_sex[f'P{p}'],
            mode='lines',
            name=f'P{p}',
            line=dict(width=1 if p != 50 else 3, 
                      color='lightblue' if p != 50 else 'blue'),
            showlegend=False
        ), row=1, col=1)
    
    fig.add_trace(go.Scatter(
        x=[total_months],
        y=[current_height],
        mode='markers',
        name='Tr·∫ª',
        marker=dict(size=12, color='red'),
        row=1, col=1
    ))
    
    # Bi·ªÉu ƒë·ªì BMI
    for p in percentiles:
        fig.add_trace(go.Scatter(
            x=df_bmi_sex['Agemos'], 
            y=df_bmi_sex[f'P{p}'],
            mode='lines',
            name=f'P{p}',
            line=dict(width=1 if p != 50 else 3, 
                      color='lightgreen' if p != 50 else 'green'),
            showlegend=False
        ), row=1, col=2)
    
    fig.add_trace(go.Scatter(
        x=[total_months],
        y=[bmi],
        mode='markers',
        name='Tr·∫ª',
        marker=dict(size=12, color='red'),
        showlegend=False,
        row=1, col=2
    ))
    
    # C·∫≠p nh·∫≠t layout
    fig.update_layout(
        height=500,
        title_text="Theo d√µi TƒÉng tr∆∞·ªüng so v·ªõi Ti√™u chu·∫©n CDC",
        template='plotly_white',
        hovermode="x unified"
    )
    
    fig.update_xaxes(title_text="Tu·ªïi (th√°ng)", row=1, col=1)
    fig.update_xaxes(title_text="Tu·ªïi (th√°ng)", row=1, col=2)
    fig.update_yaxes(title_text="Chi·ªÅu cao (cm)", row=1, col=1)
    fig.update_yaxes(title_text="BMI", row=1, col=2)
    
    st.plotly_chart(fig, use_container_width=True)
    
    # Gi·∫£i th√≠ch
    st.markdown("---")
    st.subheader("Gi·∫£i th√≠ch Bi·ªÉu ƒë·ªì")
    st.info("""
        - **ƒê∆∞·ªùng m√†u xanh d∆∞∆°ng/xanh l√° ƒë·∫≠m**: Ph√¢n v·ªã 50 (trung b√¨nh)
        - **C√°c ƒë∆∞·ªùng m√†u nh·∫°t**: C√°c ph√¢n v·ªã kh√°c (3, 5, 10, 25, 75, 90, 95, 97)
        - **ƒêi·ªÉm ƒë·ªè**: V·ªã tr√≠ c·ªßa tr·∫ª tr√™n bi·ªÉu ƒë·ªì
        - Bi·ªÉu ƒë·ªì so s√°nh s·ª± ph√°t tri·ªÉn c·ªßa tr·∫ª v·ªõi ti√™u chu·∫©n c·ªßa CDC
    """)
    
    st.markdown("**Khuy·∫øn ngh·ªã:**")
    if current_height < df_height_sex.loc[df_height_sex['Agemos'] == total_months, 'P25'].values[0]:
        st.warning("Chi·ªÅu cao c·ªßa tr·∫ª ƒëang ·ªü d∆∞·ªõi m·ª©c trung b√¨nh. C·∫ßn ki·ªÉm tra dinh d∆∞·ª°ng v√† v·∫≠n ƒë·ªông.")
    elif current_height > df_height_sex.loc[df_height_sex['Agemos'] == total_months, 'P90'].values[0]:
        st.success("Chi·ªÅu cao c·ªßa tr·∫ª ƒëang ·ªü m·ª©c t·ªët! Ti·∫øp t·ª•c duy tr√¨ ch·∫ø ƒë·ªô dinh d∆∞·ª°ng v√† v·∫≠n ƒë·ªông h·ª£p l√Ω.")
    else:
        st.info("Chi·ªÅu cao c·ªßa tr·∫ª ƒëang ·ªü m·ª©c trung b√¨nh. Ti·∫øp t·ª•c theo d√µi v√† ƒë·∫£m b·∫£o dinh d∆∞·ª°ng ƒë·∫ßy ƒë·ªß.")

# Footer
st.markdown("---")
st.markdown("""
    <div class="footer">
        <p>¬© 2023 ·ª®ng d·ª•ng Theo d√µi Ph√°t tri·ªÉn Tr·∫ª em | 
        Ph√°t tri·ªÉn b·ªüi ƒê·ªôi ng≈© Chuy√™n gia Nhi khoa | 
        D·ªØ li·ªáu tham kh·∫£o t·ª´ Trung t√¢m Ki·ªÉm so√°t v√† Ph√≤ng ng·ª´a D·ªãch b·ªánh Hoa K·ª≥ (CDC)</p>
        <p>L∆∞u √Ω: ·ª®ng d·ª•ng n√†y ch·ªâ mang t√≠nh ch·∫•t tham kh·∫£o. Vui l√≤ng tham kh·∫£o √Ω ki·∫øn b√°c sƒ© ƒë·ªÉ c√≥ ƒë√°nh gi√° ch√≠nh x√°c.</p>
    </div>
    """, unsafe_allow_html=True)
